name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  # Analyze and test the Flutter code
  analyze:
    runs-on: ubuntu-latest
    name: Analyze Flutter Code

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.27.4"
          channel: "stable"

      - name: Install dependencies
        run: flutter pub get

      - name: Analyze code
        run: flutter analyze

      - name: Run tests
        run: flutter test --coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: coverage/lcov.info
          fail_ci_if_error: true

  # Test on Android
  test-android:
    runs-on: ubuntu-latest
    name: Test Android Implementation

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: "adopt"
          java-version: "17"

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.27.4"
          channel: "stable"

      - name: Install dependencies
        run: flutter pub get

      - name: Build Android APK
        run: |
          cd example
          flutter build apk --debug

  # Test on iOS (macOS runner)
  test-ios:
    runs-on: macos-latest
    name: Test iOS Implementation

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.27.4"
          channel: "stable"

      - name: Install dependencies
        run: flutter pub get

      - name: Build iOS app
        run: |
          cd example
          flutter build ios --no-codesign

  # Test on macOS
  test-macos:
    runs-on: macos-latest
    name: Test macOS Implementation

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.27.4"
          channel: "stable"

      - name: Enable macOS desktop support
        run: flutter config --enable-macos-desktop

      - name: Install dependencies
        run: flutter pub get

      - name: Build macOS app
        run: |
          cd example
          flutter build macos

  # Test on Web
  test-web:
    runs-on: ubuntu-latest
    name: Test Web Implementation

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.27.4"
          channel: "stable"

      - name: Enable web support
        run: flutter config --enable-web

      - name: Install dependencies
        run: flutter pub get

      - name: Build web app
        run: |
          cd example
          flutter build web

  # Integration tests
  integration-test:
    runs-on: ubuntu-latest
    name: Integration Tests

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.27.4"
          channel: "stable"

      - name: Install dependencies
        run: flutter pub get

      # - name: Run integration tests
      #   run: |
      #     cd example
      #     flutter test integration_test/

  # Code quality and security
  quality-check:
    runs-on: ubuntu-latest
    name: Code Quality Check

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.27.4"
          channel: "stable"

      - name: Install dependencies
        run: flutter pub get

      - name: Run dependency audit
        run: flutter pub deps

      - name: Check for outdated dependencies
        run: flutter pub outdated

      - name: Security scan
        run: |
          # Install dart_code_metrics for additional analysis
          dart pub global activate dart_code_metrics
          dart pub global run dart_code_metrics:metrics analyze lib

  # Documentation check
  docs-check:
    runs-on: ubuntu-latest
    name: Documentation Check

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.27.4"
          channel: "stable"

      - name: Install dependencies
        run: flutter pub get

      - name: Generate documentation
        run: |
          dart pub global activate dartdoc
          dart pub global run dartdoc

      - name: Check documentation coverage
        run: |
          # Check if all public APIs are documented
          dart pub global run dartdoc --validate-links

  # Performance benchmarks
  performance-test:
    runs-on: ubuntu-latest
    name: Performance Tests

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.27.4"
          channel: "stable"

      - name: Install dependencies
        run: flutter pub get

      - name: Run performance tests
        run: |
          cd example
          flutter test test_driver/perf_test.dart || echo "Performance tests not implemented yet"

  # Publish dry run (only on main branch)
  publish-dry-run:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    name: Publish Dry Run
    needs:
      [
        analyze,
        test-android,
        test-ios,
        test-macos,
        test-web,
        integration-test,
        quality-check,
      ]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.27.4"
          channel: "stable"

      - name: Install dependencies
        run: flutter pub get

      - name: Publish dry run
        run: flutter pub publish --dry-run

      - name: Check package score
        run: |
          # Install pana for package analysis
          dart pub global activate pana
          dart pub global run pana --no-warning

  # Create release (only on version tags)
  release:
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    name: Create Release
    needs:
      [
        analyze,
        test-android,
        test-ios,
        test-macos,
        test-web,
        integration-test,
        quality-check,
      ]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.27.4"
          channel: "stable"

      - name: Install dependencies
        run: flutter pub get

      - name: Build release artifacts
        run: |
          # Build example apps for all platforms
          cd example
          flutter build apk --release
          flutter build ios --release --no-codesign
          flutter build macos --release
          flutter build web --release

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            ## What's New

            - Check CHANGELOG.md for detailed changes

            ## Platform Support

            - ✅ Android: Full support with advanced features
            - ✅ iOS: Full support with advanced features  
            - ✅ macOS: Full support with advanced features
            - ✅ Web: Full support with HTML5 APIs

            ## Installation

            Add to your `pubspec.yaml`:
            ```yaml
            dependencies:
              media_picker_plus: ${{ github.ref }}
            ```

          draft: false
          prerelease: false

      - name: Publish to pub.dev
        uses: k-paxian/dart-package-publisher@v1.5.1
        with:
          credentialJson: ${{ secrets.CREDENTIAL_JSON }}
          flutter: true
          skipTests: true

  # Notification
  notify:
    if: always()
    runs-on: ubuntu-latest
    name: Notify Results
    needs:
      [
        analyze,
        test-android,
        test-ios,
        test-macos,
        test-web,
        integration-test,
        quality-check,
      ]

    steps:
      - name: Notify on success
        if: success()
        run: |
          echo "✅ All tests passed successfully!"

      - name: Notify on failure
        if: failure()
        run: |
          echo "❌ Some tests failed. Please check the logs."

      - name: Create test summary
        run: |
          echo "## Test Summary" >> $GITHUB_STEP_SUMMARY
          echo "- Code Analysis: ${{ needs.analyze.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Android Tests: ${{ needs.test-android.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- iOS Tests: ${{ needs.test-ios.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- macOS Tests: ${{ needs.test-macos.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Web Tests: ${{ needs.test-web.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Integration Tests: ${{ needs.integration-test.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Quality Check: ${{ needs.quality-check.result }}" >> $GITHUB_STEP_SUMMARY
